# Pre-commit configuration for Azure OpenAI Multi-Project Repository
# Install with: pre-commit install
# Run manually with: pre-commit run --all-files

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: detect-private-key

  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        args: [--line-length=79, --extend-exclude=\.venv.*]
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile=black, --line-length=79, --skip=.venv]

  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        args: ['--max-line-length=79', '--extend-ignore=E203,W503', '--exclude=.venv*,__pycache__,.git']

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        additional_dependencies: [
          types-requests,
          types-setuptools,
          types-urllib3,
        ]

  - repo: https://github.com/pycqa/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: [-r, --skip, "B101,B603,B607,B404,B602"]
        exclude: ^(tests/|\.venv.*/).*

  - repo: https://github.com/python-poetry/poetry
    rev: 2.1.3
    hooks:
      - id: poetry-check

  - repo: local
    hooks:
      - id: azure-cli-check
        name: Check Azure CLI availability
        entry: powershell
        language: system
        pass_filenames: false
        args:
          - -Command
          - |
            try {
              $result = az account show 2>$null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Azure CLI authenticated" -ForegroundColor Green
              } else {
                Write-Host "‚ö†Ô∏è  Azure CLI not authenticated - run 'az login'" -ForegroundColor Yellow
                Write-Host "‚ÑπÔ∏è  This won't block the commit, but deployment will fail" -ForegroundColor Cyan
              }
            } catch {
              Write-Host "‚ö†Ô∏è  Azure CLI not found - install from https://docs.microsoft.com/en-us/cli/azure/" -ForegroundColor Yellow
            }

      - id: python-syntax-check
        name: Check Python syntax
        entry: python -m py_compile
        language: system
        files: \.py$

      - id: azure-secrets-check
        name: Check for Azure secrets
        entry: powershell
        language: system
        pass_filenames: false
        args:
          - -Command
          - |
            $secretPatterns = @(
              '([''"`"][A-Za-z0-9+/]{32,}[=]*[''"`"])',  # Base64 keys
              '(password\s*=\s*[''"`"][^''`"]{8,}[''"`"])',  # Passwords
              '(token\s*=\s*[''"`"][A-Za-z0-9._-]{20,}[''"`"])',  # Tokens
              '(AKIA[0-9A-Z]{16})',  # AWS keys
              '(sk_live_[0-9a-zA-Z]{24,})'  # Stripe keys
            )

            $found = $false
            foreach ($pattern in $secretPatterns) {
              $matches = Select-String -Path "*.py" -Pattern $pattern -Exclude "*test*","*example*" 2>$null
              if ($matches) {
                Write-Host "‚ö†Ô∏è Potential secret pattern found: $pattern" -ForegroundColor Red
                $found = $true
              }
            }

            if (-not $found) {
              Write-Host "‚úÖ No hardcoded secrets detected" -ForegroundColor Green
            } else {
              Write-Host "üí° Use Azure Key Vault for secrets (which this project does correctly)" -ForegroundColor Cyan
              exit 1
            }
