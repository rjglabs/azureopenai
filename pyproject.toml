[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "azure-openai-monorepo"
version = "0.1.0"
description = "Azure OpenAI Multi-Project Repository - Development Tools and Quality Control"
authors = [
    {name = "rjglabs", email = "your-email@domain.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Core utilities for repository management
    "python-dotenv>=1.1.1",
    "rich>=13.9.4",
    "click>=8.1.8",
]

[tool.setuptools]
# Don't discover packages - this is just a dev environment container
packages = []

[project.optional-dependencies]
dev = [
    # Code formatting and quality
    "black>=25.1.0",
    "isort>=6.0.1",
    "flake8>=7.3.0",
    "mypy>=1.16.1",

    # Additional flake8 plugins
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.2",
    "flake8-black>=0.3.6",
    "flake8-isort>=6.1.1",

    # Testing framework
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",

    # Security and validation
    "bandit>=1.8.6",
    "safety>=3.2.11",
    "pre-commit>=4.2.0",

    # Type stubs for common packages
    "types-requests>=2.32.0.20241206",
    "types-setuptools>=75.6.0.20241218",
    "types-urllib3>=1.26.25.14",

    # Development and debugging tools
    "ipython>=8.30.0",
    "pdbpp>=0.10.3",

    # Documentation tools
    "sphinx>=8.1.3",
    "sphinx-rtd-theme>=3.0.2",

    # Code analysis
    "radon>=6.0.1",
    "xenon>=0.9.1",
    "pipdeptree>=2.23.4",
]

[tool.poetry]
package-mode = false

# Global code quality configuration for all projects
[tool.black]
line-length = 79
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude directories
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv.*
  | __pycache__
  | node_modules
  | dist
  | build
)/
'''

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".venv", "__pycache__", ".git", ".mypy_cache", ".pytest_cache", "node_modules", "dist", "build"]
skip_glob = ["*/.venv*/*", "*/__pycache__/*", "*/node_modules/*", "*/dist/*", "*/build/*"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true
strict = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true

# Disable specific error codes for common SDK compatibility issues
disable_error_code = ["union-attr", "misc", "call-overload", "arg-type", "assignment"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["*/tests", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "infra: marks infrastructure-related tests",
    "checks: marks validation/check tests",
    "projects: marks project-specific tests",
]

[tool.coverage.run]
source = ["."]
branch = true
omit = [
    "*/tests/*",
    ".venv*/*",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/dist/*",
    "*/build/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass"
]
ignore_errors = true
show_missing = true
precision = 2
fail_under = 80

[tool.bandit]
exclude_dirs = [".venv*", "*/tests", "tests"]
skips = ["B101", "B603", "B607", "B404"]
