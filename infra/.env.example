# Infrastructure Environment Configuration

## File: `infra/.env.example` (Template)

```bash
# =============================================================================
# Azure OpenAI Infrastructure Configuration Template
# Copy this file to .env and customize with your specific values
# =============================================================================

# =============================================================================
# AZURE CORE CONFIGURATION
# =============================================================================

# Azure region for all resources
# LIMITATIONS: Must be a valid Azure region name, AI services not available in all regions
# RECOMMENDATIONS: Use eastus2, westus2, or westeurope for best AI service availability
# VALIDATION: Check https://azure.microsoft.com/en-us/explore/global-infrastructure/products-by-region/
LOCATION=eastus2

# Azure subscription ID (get with: az account show --query id -o tsv)
# LIMITATIONS: Must be a valid GUID format, user must have Contributor+ access
# REQUIREMENTS: 36 characters, format: 12345678-1234-1234-1234-123456789012
# AZURE_SUBSCRIPTION_ID=12345678-1234-1234-1234-123456789012

# Resource group name for all AI Foundry resources
# LIMITATIONS: 1-90 characters, alphanumeric, underscore, parentheses, hyphen, period (except at end)
# RESTRICTIONS: Cannot end with period, cannot contain spaces or special chars except allowed
# BEST PRACTICE: Use consistent naming like rg-{project}-{environment}
RESOURCE_GROUP=rg-ai-foundry-dev

# =============================================================================
# AZURE KEY VAULT CONFIGURATION
# =============================================================================

# Key Vault name (must be globally unique, 3-24 characters, alphanumeric and hyphens only)
# LIMITATIONS: 3-24 characters, globally unique across ALL Azure, alphanumeric and hyphens only
# RESTRICTIONS: Cannot start with number, cannot have consecutive hyphens, cannot end with hyphen
# VALIDATION: Must match regex: ^[a-zA-Z][a-zA-Z0-9-]{1,22}[a-zA-Z0-9]$
# GLOBAL SCOPE: Must be unique across all Azure worldwide (not just your subscription)
# Suggested format: kv-{project}-{environment}-{unique-suffix}
KEYVAULT_NAME=kv-ai-foundry-dev-001

# =============================================================================
# AZURE AI SERVICES CONFIGURATION
# =============================================================================

# AI Services account name (for unified AI capabilities)
# LIMITATIONS: 2-64 characters, alphanumeric and hyphens, cannot start/end with hyphen
# SCOPE: Must be unique within resource group
# REQUIREMENTS: Must match regex: ^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}[a-zA-Z0-9]$
# This will be used for OpenAI, Cognitive Services, etc.
AI_SERVICES_NAME=ai-services-foundry-001

# OpenAI service name (dedicated OpenAI resource)
# LIMITATIONS: 2-64 characters, alphanumeric and hyphens, cannot start/end with hyphen
# SCOPE: Must be unique within resource group
# REQUIREMENTS: Must match regex: ^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}[a-zA-Z0-9]$
# This is separate from AI Services for better cost control and features
OPENAI_SERVICE_NAME=openai-foundry-001

# =============================================================================
# AZURE COGNITIVE SEARCH CONFIGURATION
# =============================================================================

# Cognitive Search service name (must be globally unique)
# LIMITATIONS: 2-60 characters, globally unique across ALL Azure, lowercase letters, digits, hyphens only
# RESTRICTIONS: Cannot start/end with hyphen, cannot have consecutive hyphens
# VALIDATION: Must match regex: ^[a-z0-9][a-z0-9-]{0,58}[a-z0-9]$
# GLOBAL SCOPE: Must be unique across all Azure worldwide
# Used for AI-powered search and knowledge mining
COGNITIVE_SEARCH_NAME=cog-search-foundry-001

# =============================================================================
# AZURE STORAGE CONFIGURATION
# =============================================================================

# Storage account name (must be globally unique, 3-24 characters, lowercase alphanumeric only)
# LIMITATIONS: 3-24 characters, globally unique across ALL Azure, lowercase letters and numbers ONLY
# RESTRICTIONS: No hyphens, underscores, or uppercase letters allowed
# VALIDATION: Must match regex: ^[a-z0-9]{3,24}$
# GLOBAL SCOPE: Must be unique across all Azure worldwide
# Used for training data, models, artifacts, and logs
STORAGE_ACCOUNT_NAME=stfoundrydev001

# =============================================================================
# AZURE CONTAINER REGISTRY CONFIGURATION
# =============================================================================

# Container registry name (must be globally unique, 5-50 characters, alphanumeric only)
# LIMITATIONS: 5-50 characters, globally unique across ALL Azure, alphanumeric only (no hyphens/underscores)
# RESTRICTIONS: No special characters allowed, cannot start with number
# VALIDATION: Must match regex: ^[a-zA-Z][a-zA-Z0-9]{4,49}$
# GLOBAL SCOPE: Must be unique across all Azure worldwide
# Used for custom AI model deployment and containerized applications
CONTAINER_REGISTRY_NAME=crfoundrydev001

# =============================================================================
# AZURE MONITORING CONFIGURATION
# =============================================================================

# Log Analytics workspace name
# LIMITATIONS: 4-63 characters, alphanumeric and hyphens, cannot start/end with hyphen
# SCOPE: Must be unique within resource group
# REQUIREMENTS: Must match regex: ^[a-zA-Z0-9][a-zA-Z0-9-]{2,61}[a-zA-Z0-9]$
# Centralized logging for all Azure resources
LOG_WORKSPACE_NAME=log-ai-foundry-dev

# Application Insights component name
# LIMITATIONS: 1-260 characters, most characters allowed but some restrictions apply
# SCOPE: Must be unique within resource group
# RESTRICTIONS: Cannot contain: <, >, %, &, \, ?, /, control characters
# AI workload monitoring and telemetry
APPLICATION_INSIGHTS_NAME=appi-ai-foundry-dev

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Environment tag for resource organization
# LIMITATIONS: No specific Azure limits, but keep consistent for governance
# COMMON VALUES: development, staging, production, test, demo
# BEST PRACTICE: Use lowercase for consistency
ENVIRONMENT=development

# Project name for consistent resource tagging
# LIMITATIONS: Tag values limited to 256 characters
# REQUIREMENTS: Used for resource organization and cost allocation
# BEST PRACTICE: Use descriptive name without spaces
PROJECT_NAME=ai-foundry

# Owner tag for resource management
# LIMITATIONS: Tag values limited to 256 characters, should be valid email
# REQUIREMENTS: Must be valid email format for notifications and billing
# GOVERNANCE: Used for resource ownership and access management
RESOURCE_OWNER=your-email@domain.com

# Cost center for billing allocation
# LIMITATIONS: Tag values limited to 256 characters
# REQUIREMENTS: Should match your organization's cost center codes
# BILLING: Used for Azure cost allocation and reporting
COST_CENTER=IT-AI-DEVELOPMENT

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Enable diagnostic logging for all resources
# LIMITATIONS: Boolean values only (true/false)
# REQUIREMENTS: Must be lowercase boolean
# COMPLIANCE: Required for most enterprise security policies
ENABLE_DIAGNOSTICS=true

# Enable soft delete for Key Vault (recommended for production)
# LIMITATIONS: Boolean values only, once enabled cannot be disabled
# REQUIREMENTS: Must be lowercase boolean
# RETENTION: Soft delete retains secrets for 90 days minimum
# WARNING: Cannot be disabled once enabled on a Key Vault
ENABLE_SOFT_DELETE=true

# Enable purge protection for Key Vault (required for production)
# LIMITATIONS: Boolean values only, once enabled cannot be disabled
# REQUIREMENTS: Must be lowercase boolean, requires soft delete to be enabled
# COMPLIANCE: Required for regulatory compliance in many industries
# WARNING: Cannot be disabled once enabled, prevents permanent deletion
ENABLE_PURGE_PROTECTION=true

# Network access level (Public, Private, or Restricted)
# LIMITATIONS: Must be one of: Public, Private, Restricted
# PUBLIC: Resources accessible from internet (with authentication)
# PRIVATE: Resources only accessible via private endpoints/VNet
# RESTRICTED: Resources accessible with IP restrictions
NETWORK_ACCESS=Public

# =============================================================================
# OPTIONAL: ADVANCED CONFIGURATION
# =============================================================================

# Custom domain name for AI services (optional)
# LIMITATIONS: Must be valid domain name you own, requires DNS validation
# REQUIREMENTS: Domain verification required, HTTPS certificate needed
# SCOPE: Must be unique globally and verified ownership
# CUSTOM_DOMAIN_NAME=my-ai-services

# Virtual network name for private networking (optional)
# LIMITATIONS: 2-64 characters, alphanumeric, underscore, hyphen, period
# SCOPE: Must be unique within resource group
# REQUIREMENTS: Must exist or be created before deploying AI services
# VNET_NAME=vnet-ai-foundry-dev

# Subnet name for AI services (optional)
# LIMITATIONS: 1-80 characters, alphanumeric, underscore, hyphen, period
# REQUIREMENTS: Must exist within specified VNet, proper address space
# MINIMUM SIZE: /29 subnet (at least 8 IPs) for most AI services
# SUBNET_NAME=subnet-ai-services

# Private DNS zone name (optional, for private endpoints)
# LIMITATIONS: Must be valid DNS zone name format
# REQUIREMENTS: Format like privatelink.{service}.azure.com
# SCOPE: Must be unique within resource group or linked properly
# PRIVATE_DNS_ZONE=privatelink.cognitiveservices.azure.com

# Backup storage account for disaster recovery (optional)
# LIMITATIONS: Same as primary storage account (3-24 chars, globally unique, lowercase alphanumeric)
# REQUIREMENTS: Must be in different region for true DR
# RECOMMENDATIONS: Use geo-redundant storage (GRS) for automatic replication
# BACKUP_STORAGE_ACCOUNT=stfoundrybackup001

# =============================================================================
# PRICING TIER CONFIGURATION
# =============================================================================

# AI Services SKU (S0 for production, F0 for development/testing)
# LIMITATIONS: F0 (Free) has usage limits and feature restrictions
# F0 LIMITS: 20 transactions per minute, limited features
# S0 LIMITS: Pay-per-use, full features, higher rate limits
# VALID VALUES: F0, S0, S1, S2, S3, S4 (varies by service)
AI_SERVICES_SKU=S0

# OpenAI Service SKU (S0 is standard)
# LIMITATIONS: S0 is currently the only available SKU for most regions
# BILLING: Pay-per-token consumption model
# VALID VALUES: S0 (Standard)
OPENAI_SKU=S0

# Cognitive Search SKU (free, basic, standard, standard2, standard3, storage_optimized_l1, storage_optimized_l2)
# LIMITATIONS: Free tier has limits on storage and search units
# FREE LIMITS: 50MB storage, 3 indexes, 10k documents per index
# BASIC LIMITS: 2GB storage, 15 indexes, 1M documents per index
# VALID VALUES: free, basic, standard, standard2, standard3, storage_optimized_l1, storage_optimized_l2
SEARCH_SKU=free

# Storage Account SKU (Standard_LRS, Standard_GRS, Standard_RAGRS, Standard_ZRS, Premium_LRS)
# LIMITATIONS: Premium requires specific VM types, geographic restrictions apply
# LRS: Locally redundant (3 copies in one datacenter)
# GRS: Geo-redundant (6 copies across regions)
# RAGRS: Read-access geo-redundant
# ZRS: Zone-redundant (3 copies across zones)
# VALID VALUES: Standard_LRS, Standard_GRS, Standard_RAGRS, Standard_ZRS, Premium_LRS, Premium_ZRS
STORAGE_SKU=Standard_LRS

# Container Registry SKU (Basic, Standard, Premium)
# LIMITATIONS: Basic has storage and throughput limits
# BASIC LIMITS: 10GB storage, 10GB transfer per month
# STANDARD: 100GB storage, 100GB transfer per month
# PREMIUM: 500GB storage, 500GB transfer per month, advanced features
# VALID VALUES: Basic, Standard, Premium
CONTAINER_REGISTRY_SKU=Basic

# Log Analytics SKU (PerGB2018, Free, Standalone, PerNode, Standard, Premium)
# LIMITATIONS: Free tier has 500MB daily limit and 7-day retention
# FREE LIMITS: 500MB per day, 7-day retention
# PERGB2018: Pay per GB ingested, configurable retention
# VALID VALUES: PerGB2018, Free, Standalone, PerNode (legacy), Standard (legacy), Premium (legacy)
LOG_ANALYTICS_SKU=PerGB2018

# =============================================================================
# DEPLOYMENT VALIDATION
# =============================================================================

# Enable deployment validation before actual deployment
# LIMITATIONS: Boolean values only (true/false)
# REQUIREMENTS: Must be lowercase boolean
# PERFORMANCE: Adds ~2-5 minutes to deployment time
VALIDATE_DEPLOYMENT=true

# Enable dry-run mode for testing configuration
# LIMITATIONS: Boolean values only (true/false)
# BEHAVIOR: When true, shows what would be deployed without creating resources
# SAFETY: Recommended for testing configuration changes
DRY_RUN=false

# Enable verbose logging during deployment
# LIMITATIONS: Boolean values only (true/false)
# IMPACT: Increases log verbosity and deployment time
# DEBUGGING: Useful for troubleshooting deployment issues
VERBOSE_LOGGING=true

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
#
# AZURE NAMING CONVENTIONS & LIMITATIONS:
#
# GLOBAL UNIQUENESS (across ALL Azure worldwide):
# - Key Vault names: kv-project-env-001 (3-24 chars, alphanumeric + hyphens)
# - Storage accounts: stprojectenv001 (3-24 chars, lowercase alphanumeric only)
# - Container registries: crprojectenv001 (5-50 chars, alphanumeric only)
# - Cognitive Search: cog-project-env-001 (2-60 chars, lowercase + hyphens)
#
# RESOURCE GROUP UNIQUENESS (within subscription):
# - AI Services: ai-project-env-001 (2-64 chars, alphanumeric + hyphens)
# - OpenAI Services: openai-project-env-001 (2-64 chars, alphanumeric + hyphens)
# - Log Analytics: log-project-env (4-63 chars, alphanumeric + hyphens)
# - App Insights: appi-project-env (1-260 chars, most chars allowed)
#
# CHARACTER RESTRICTIONS BY SERVICE:
# - Key Vault: [a-zA-Z][a-zA-Z0-9-]{1,22}[a-zA-Z0-9] (no consecutive hyphens)
# - Storage: [a-z0-9]{3,24} (lowercase letters and numbers only)
# - Container Registry: [a-zA-Z][a-zA-Z0-9]{4,49} (cannot start with number)
# - Cognitive Search: [a-z0-9][a-z0-9-]{0,58}[a-z0-9] (lowercase only)
#
# SECURITY LIMITATIONS & WARNINGS:
# - Soft Delete: Cannot be disabled once enabled (retains for 90+ days)
# - Purge Protection: Cannot be disabled once enabled (prevents permanent deletion)
# - Private Endpoints: Require VNet setup and may affect connectivity
# - Network Restrictions: May block legitimate access if misconfigured
#
# SKU LIMITATIONS & COSTS:
# - Free Tiers: Have usage limits and feature restrictions
# - AI Services F0: 20 transactions/minute, limited features
# - Search Free: 50MB storage, 3 indexes, 10k documents
# - Log Analytics Free: 500MB/day, 7-day retention
# - Premium SKUs: Higher costs but better performance and features
#
# REGIONAL AVAILABILITY:
# - AI Services: Not available in all regions (check Azure docs)
# - OpenAI: Limited regional availability (primarily US and EU)
# - Some features: May be region-specific or in preview
#
# QUOTA & THROTTLING LIMITS:
# - Each service has default quotas that may need increases
# - Rate limiting applies to API calls
# - Concurrent operation limits exist
# - Some services have daily/monthly usage caps
#
# BILLING & COST CONSIDERATIONS:
# - Pay-per-use services can accumulate costs quickly
# - Some services charge for storage + transactions
# - Data transfer costs may apply
# - Premium SKUs have minimum commitments
#
# COMPLIANCE & GOVERNANCE:
# - Resource tagging is crucial for cost allocation
# - Some industries require specific configurations
# - Audit logging may be mandatory in your organization
# - Data residency requirements may limit region choices
#
# BACKUP & DISASTER RECOVERY:
# - Some services don't support cross-region backup
# - Configuration backup is manual for most services
# - Recovery time objectives vary by service
# - Geo-redundant options increase costs
#
# DEPENDENCIES & ORDER:
# - Key Vault must be created before other services
# - VNet must exist before private endpoints
# - Some services require others to be provisioned first
# - Role assignments may have propagation delays
#
# =============================================================================
```

## File: `infra/.env` (Your Specific Configuration)

```bash
# =============================================================================
# Azure OpenAI Infrastructure Configuration
# Customized for rjglabs/azureopenai project
# =============================================================================

# =============================================================================
# AZURE CORE CONFIGURATION
# =============================================================================

LOCATION=eastus2
RESOURCE_GROUP=rg-ai-nukesearch01

# =============================================================================
# AZURE KEY VAULT CONFIGURATION
# =============================================================================

KEYVAULT_NAME=kvainukesearch01

# =============================================================================
# AZURE AI SERVICES CONFIGURATION
# =============================================================================

AI_SERVICES_NAME=aiserv-ai-nukesearch01
OPENAI_SERVICE_NAME=openai-nukesearch01

# =============================================================================
# AZURE COGNITIVE SEARCH CONFIGURATION
# =============================================================================

COGNITIVE_SEARCH_NAME=cog-ai-nukesearch01

# =============================================================================
# AZURE STORAGE CONFIGURATION
# =============================================================================

STORAGE_ACCOUNT_NAME=stnukesearch01

# =============================================================================
# AZURE CONTAINER REGISTRY CONFIGURATION
# =============================================================================

CONTAINER_REGISTRY_NAME=crnukesearch01

# =============================================================================
# AZURE MONITORING CONFIGURATION
# =============================================================================

LOG_WORKSPACE_NAME=log-ai-nukesearch01
APPLICATION_INSIGHTS_NAME=appi-ai-nukesearch01

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

ENVIRONMENT=production
PROJECT_NAME=nuclear-news-search
RESOURCE_OWNER=rjglabs@domain.com
COST_CENTER=AI-RESEARCH

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

ENABLE_DIAGNOSTICS=true
ENABLE_SOFT_DELETE=true
ENABLE_PURGE_PROTECTION=true
NETWORK_ACCESS=Public

# =============================================================================
# PRICING TIER CONFIGURATION
# =============================================================================

AI_SERVICES_SKU=S0
OPENAI_SKU=S0
SEARCH_SKU=free
STORAGE_SKU=Standard_LRS
CONTAINER_REGISTRY_SKU=Basic
LOG_ANALYTICS_SKU=PerGB2018

# =============================================================================
# DEPLOYMENT VALIDATION
# =============================================================================

VALIDATE_DEPLOYMENT=true
DRY_RUN=false
VERBOSE_LOGGING=true
```

## Environment Configuration Validation Script

### File: `infra/validate-env-config.py`

```python
#!/usr/bin/env python3
"""
Environment Configuration Validator for Azure OpenAI Infrastructure
Validates .env configuration before deployment
"""

import os
import re
import sys
from typing import Dict, List, Tuple
from pathlib import Path
from dotenv import load_dotenv

class EnvironmentValidator:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.config = {}
    
    def load_config(self, env_file: str = ".env") -> bool:
        """Load and validate environment configuration"""
        env_path = Path(env_file)
        
        if not env_path.exists():
            self.errors.append(f"Environment file not found: {env_file}")
            return False
        
        load_dotenv(env_path)
        
        # Load all environment variables
        required_vars = [
            "LOCATION", "RESOURCE_GROUP", "KEYVAULT_NAME", 
            "AI_SERVICES_NAME", "OPENAI_SERVICE_NAME", "COGNITIVE_SEARCH_NAME",
            "STORAGE_ACCOUNT_NAME", "CONTAINER_REGISTRY_NAME",
            "LOG_WORKSPACE_NAME", "APPLICATION_INSIGHTS_NAME"
        ]
        
        for var in required_vars:
            value = os.getenv(var)
            if not value:
                self.errors.append(f"Required environment variable missing: {var}")
            else:
                self.config[var] = value
        
        return len(self.errors) == 0
    
    def validate_azure_naming(self) -> None:
        """Validate Azure resource naming conventions"""
        
        # Key Vault naming (3-24 chars, alphanumeric and hyphens)
        if "KEYVAULT_NAME" in self.config:
            kv_name = self.config["KEYVAULT_NAME"]
            if not re.match(r'^[a-zA-Z0-9-]{3,24}$', kv_name):
                self.errors.append(f"Invalid Key Vault name: {kv_name} (3-24 chars, alphanumeric and hyphens only)")
        
        # Storage Account naming (3-24 chars, lowercase alphanumeric only)
        if "STORAGE_ACCOUNT_NAME" in self.config:
            storage_name = self.config["STORAGE_ACCOUNT_NAME"]
            if not re.match(r'^[a-z0-9]{3,24}$', storage_name):
                self.errors.append(f"Invalid Storage Account name: {storage_name} (3-24 chars, lowercase alphanumeric only)")
        
        # Container Registry naming (5-50 chars, alphanumeric only)
        if "CONTAINER_REGISTRY_NAME" in self.config:
            cr_name = self.config["CONTAINER_REGISTRY_NAME"]
            if not re.match(r'^[a-zA-Z0-9]{5,50}$', cr_name):
                self.errors.append(f"Invalid Container Registry name: {cr_name} (5-50 chars, alphanumeric only)")
        
        # Cognitive Search naming (2-60 chars, alphanumeric and hyphens, start/end with alphanumeric)
        if "COGNITIVE_SEARCH_NAME" in self.config:
            search_name = self.config["COGNITIVE_SEARCH_NAME"]
            if not re.match(r'^[a-zA-Z0-9][a-zA-Z0-9-]{0,58}[a-zA-Z0-9]$', search_name):
                self.errors.append(f"Invalid Cognitive Search name: {search_name} (2-60 chars, alphanumeric and hyphens, start/end with alphanumeric)")
    
    def validate_azure_location(self) -> None:
        """Validate Azure location"""
        if "LOCATION" in self.config:
            location = self.config["LOCATION"]
            valid_locations = [
                "eastus", "eastus2", "westus", "westus2", "westus3", "centralus",
                "northcentralus", "southcentralus", "westcentralus",
                "canadacentral", "canadaeast", "brazilsouth",
                "northeurope", "westeurope", "francecentral", "germanywestcentral",
                "norwayeast", "switzerlandnorth", "uksouth", "ukwest",
                "eastasia", "southeastasia", "australiaeast", "australiasoutheast",
                "centralindia", "southindia", "westindia", "japaneast", "japanwest",
                "koreacentral", "koreasouth"
            ]
            
            if location not in valid_locations:
                self.warnings.append(f"Uncommon Azure location: {location}. Verify AI services availability.")
    
    def validate_sku_configurations(self) -> None:
        """Validate SKU configurations"""
        sku_validations = {
            "AI_SERVICES_SKU": ["F0", "S0"],
            "OPENAI_SKU": ["S0"],
            "SEARCH_SKU": ["free", "basic", "standard", "standard2", "standard3"],
            "STORAGE_SKU": ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"],
            "CONTAINER_REGISTRY_SKU": ["Basic", "Standard", "Premium"],
            "LOG_ANALYTICS_SKU": ["PerGB2018", "Free", "Standalone", "PerNode"]
        }
        
        for sku_var, valid_skus in sku_validations.items():
            if sku_var in self.config:
                sku_value = self.config[sku_var]
                if sku_value not in valid_skus:
                    self.errors.append(f"Invalid {sku_var}: {sku_value}. Valid options: {', '.join(valid_skus)}")
    
    def check_name_uniqueness_requirements(self) -> None:
        """Check for globally unique naming requirements"""
        global_unique_resources = [
            "KEYVAULT_NAME", "STORAGE_ACCOUNT_NAME", 
            "CONTAINER_REGISTRY_NAME", "COGNITIVE_SEARCH_NAME"
        ]
        
        for resource in global_unique_resources:
            if resource in self.config:
                name = self.config[resource]
                if len(name) < 8:
                    self.warnings.append(f"{resource} '{name}' is short and may conflict with existing resources")
    
    def validate_configuration(self) -> Tuple[bool, List[str], List[str]]:
        """Run all validation checks"""
        self.validate_azure_naming()
        self.validate_azure_location()
        self.validate_sku_configurations()
        self.check_name_uniqueness_requirements()
        
        return len(self.errors) == 0, self.errors, self.warnings
    
    def print_validation_results(self) -> None:
        """Print validation results"""
        print("🔍 Azure OpenAI Infrastructure Configuration Validation")
        print("=" * 60)
        
        if not self.errors and not self.warnings:
            print("✅ Configuration validation passed successfully!")
            return
        
        if self.errors:
            print(f"❌ {len(self.errors)} Error(s) found:")
            for i, error in enumerate(self.errors, 1):
                print(f"   {i}. {error}")
            print()
        
        if self.warnings:
            print(f"⚠️  {len(self.warnings)} Warning(s):")
            for i, warning in enumerate(self.warnings, 1):
                print(f"   {i}. {warning}")
            print()
        
        if self.errors:
            print("❌ Please fix the errors above before proceeding with deployment.")
            return False
        else:
            print("✅ Configuration is valid with warnings noted above.")
            return True

def main():
    """Main validation function"""
    validator = EnvironmentValidator()
    
    # Try to load configuration
    if not validator.load_config():
        validator.print_validation_results()
        sys.exit(1)
    
    # Run validation
    is_valid, errors, warnings = validator.validate_configuration()
    validator.print_validation_results()
    
    # Exit with appropriate code
    sys.exit(0 if is_valid else 1)

if __name__ == "__main__":
    main()
```

## Usage Instructions

### 1. **Create Your Configuration**
```powershell
cd infra

# Copy template to working configuration
copy .env.example .env

# Edit with your specific values
notepad .env
```

### 2. **Validate Configuration**
```powershell
# Validate your configuration before deployment
python validate-env-config.py

# Should output:
# ✅ Configuration validation passed successfully!
```

### 3. **Deploy Infrastructure**
```powershell
# Test deployment (dry run)
python create-ai-foundry-project.py --dry-run

# Deploy infrastructure
python create-ai-foundry-project.py
```

## Key Features

### 🔧 **Comprehensive Configuration**
- All Azure services configured in one place
- Environment-specific settings
- Production-ready defaults
- Cost optimization options

### 🛡️ **Security Best Practices**
- Key Vault integration
- Diagnostic logging enabled
- Network access controls
- Resource tagging for governance

### ✅ **Validation & Safety**
- Pre-deployment configuration validation
- Azure naming convention checks
- SKU validation
- Uniqueness requirement warnings

### 📊 **Production Ready**
- Environment tagging
- Cost center allocation
- Resource owner tracking
- Monitoring configuration

This configuration setup ensures your Azure OpenAI infrastructure deployment is secure, compliant, and production-ready from day one!